using System;
using System.Linq;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Google;
using Google.Apis.Auth;
using GoogleAuth.Entities;
using GoogleAuth.Helpers;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;

namespace GoogleAuth.Services
{
  public interface IAuthService
  {
    string ProviderName { get; set; }
    Task<User> FindUser(string token);
    Task<SocialAccount> CreateAccount(string token);
  }

  public class FacebookAuthService : IAuthService
  {
    public string ProviderName { get; set; } = SocialAccountProvider.Providers.Facebook;
    private readonly Data.ApplicationContext _db;
    private readonly AppSettings _appSettings;

    public FacebookAuthService(Data.ApplicationContext db, IOptions<AppSettings> appSettings)
    {
      _db = db;
      _appSettings = appSettings.Value;
    }

    public async Task<User> FindUser(string token)
    {
      var identity = await GetIdentity(token);

      if (identity == null)
        return null;

      return await _db.Users.SingleOrDefaultAsync(u =>
        u.SocialAccounts.Any(a => a.Provider.Name == ProviderName && a.Key == identity.Id));
    }

    public async Task<SocialAccount> CreateAccount(string token)
    {
      var id = (await GetIdentity(token))?.Id;
      if (id == null || await _db.SocialAccounts.AnyAsync(a => a.Key == id))
        return null;

      return new SocialAccount
      {
        Key = id,
        Provider = await _db.SocialAccountProviders.FirstOrDefaultAsync(r =>
          r.Name == ProviderName)
      };
    }

    private async Task<FacebookIdentity> GetIdentity(string token)
    {
      var url = $"https://graph.facebook.com/v7.0/me?fields=email%2Cname&access_token={token}";

      try
      {
        using var client = new HttpClient();
        var result = await client.GetAsync(url);
        var identity = JsonConvert.DeserializeObject<FacebookIdentity>(await result.Content.ReadAsStringAsync());
        return identity;
      }
      catch
      {
        return null;
      }
    }

    private class FacebookIdentity
    {
      public string Id { get; set; }
      public string Name { get; set; }
      public string Email { get; set; }
    }
  }

  public class GoogleAuthService : IAuthService
  {
    public string ProviderName { get; set; } = SocialAccountProvider.Providers.Google;
    private readonly Data.ApplicationContext _db;
    private readonly AppSettings _appSettings;

    public GoogleAuthService(Data.ApplicationContext db, IOptions<AppSettings> appSettings)
    {
      _db = db;
      _appSettings = appSettings.Value;
    }

    public async Task<User> FindUser(string token)
    {
      var identity = await GetIdentity(token);
      if (identity == null)
        return null;

      return await _db.Users.SingleOrDefaultAsync(u =>
        u.SocialAccounts.Any(a => a.Provider.Name == ProviderName && a.Key == identity.Subject));
    }

    public async Task<SocialAccount> CreateAccount(string token)
    {
      var subject = (await GetIdentity(token))?.Subject ?? null;
      if (subject == null || await _db.SocialAccounts.AnyAsync(a => a.Key == subject))
        return null;

      return new SocialAccount
      {
        Key = subject,
        Provider = await _db.SocialAccountProviders.FirstOrDefaultAsync(r =>
          r.Name == ProviderName)
      };
    }

    private async Task<JsonWebSignature.Payload> GetIdentity(string token)
    {
      try
      {
        var payload = await GoogleJsonWebSignature.ValidateAsync(token, new GoogleJsonWebSignature.ValidationSettings
        {
          Audience = new[] {_appSettings.GoogleClientId},
        });
        Console.WriteLine($"Google: {payload.Email}, {payload.Name}, {payload.Subject}");
        return payload;
      }
      catch
      {
        return null;
      }
    }
  }
}